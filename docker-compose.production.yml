version: '3.8'

services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: attendance-frontend
    ports:
      - "3000:3000"  # Expose port 3000 directly
    environment:
      - REACT_APP_API_URL=http://${DOMAIN_NAME}:5000/api
      - REACT_APP_KEYCLOAK_URL=http://${DOMAIN_NAME}:8080/auth
      - REACT_APP_FRONTEND_URL=http://${DOMAIN_NAME}:3000
    depends_on:
      - backend
      - keycloak
    restart: unless-stopped
    networks:
      - attendance-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: attendance-backend
    ports:
      - "5000:5000"  # Expose backend on port 5000
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - attendance-network

  db:
    image: postgres:14
    container_name: attendance-db
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - attendance-network

  redis:
    image: redis:alpine
    container_name: attendance-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - attendance-network

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: attendance-keycloak
    ports:
      - "8080:8080"  # Expose keycloak on port 8080
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://db:5432/${DB_NAME}
      - KC_DB_USERNAME=${DB_USER}
      - KC_DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - attendance-network

volumes:
  postgres_data:

networks:
  attendance-network:
    driver: bridge