version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: attendance-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - attendance-network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: attendance-frontend
    environment:
      - REACT_APP_API_URL=http://${DOMAIN_NAME}/api
      - REACT_APP_KEYCLOAK_URL=http://${DOMAIN_NAME}/auth
      - REACT_APP_FRONTEND_URL=http://${DOMAIN_NAME}
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - attendance-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: attendance-backend
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - KEYCLOAK_SECRET=${KEYCLOAK_SECRET}
      - DOMAIN_NAME=${DOMAIN_NAME}
      - ENVIRONMENT=production
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - attendance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:14
    container_name: attendance-db
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./production-init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db-backups:/backups
    restart: unless-stopped
    networks:
      - attendance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: attendance-keycloak
    command: start --import-realm --http-enabled=true --hostname-strict=false
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://db:5432/${DB_NAME}
      - KC_DB_USERNAME=${DB_USER}
      - KC_DB_PASSWORD=${DB_PASSWORD}
      - KC_HOSTNAME=${DOMAIN_NAME}
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
    volumes:
      - ./keycloak/production-realm.json:/opt/keycloak/data/import/realm.json
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - attendance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  redis:
    image: redis:alpine
    container_name: attendance-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - attendance-network

networks:
  attendance-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: